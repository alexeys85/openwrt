--- a/arch/arm/mach-omap2/prm-regbits-33xx.h
+++ b/arch/arm/mach-omap2/prm-regbits-33xx.h
@@ -13,6 +13,16 @@
 #define AM33XX_GFX_MEM_ONSTATE_MASK			(0x3 << 17)
 #define AM33XX_GFX_MEM_RETSTATE_MASK			(1 << 6)
 #define AM33XX_GFX_MEM_STATEST_MASK			(0x3 << 4)
+#define AM33XX_ICECRUSHER_RST_SHIFT			10 
+#define AM33XX_ICEPICK_RST_SHIFT				9
+#define AM33XX_VDD2_VOLTAGE_MANAGER_RST_SHIFT	8
+#define AM33XX_VDD1_VOLTAGE_MANAGER_RST_SHIFT	7
+#define AM33XX_EXTERNAL_WARM_RST_SHIFT			6 
+#define AM33XX_SECURE_WD_RST_SHIFT				5
+#define AM33XX_MPU_WD_RST_SHIFT				4
+#define AM33XX_SECURITY_VIOL_RST_SHIFT			3
+#define AM33XX_GLOBAL_SW_RST_SHIFT             1
+#define AM33XX_GLOBAL_COLD_RST_SHIFT           0
 #define AM33XX_GLOBAL_WARM_SW_RST_MASK			(1 << 1)
 #define AM33XX_RST_GLOBAL_WARM_SW_MASK			(1 << 0)
 #define AM33XX_PRUSS_MEM_ONSTATE_MASK			(0x3 << 5)
--- a/arch/arm/mach-omap2/prm33xx.c
+++ b/arch/arm/mach-omap2/prm33xx.c
@@ -19,6 +19,25 @@
 
 #define AM33XX_RST_GLOBAL_WARM_SW_MASK		(1 << 0)
 
+/*
+ * am33xx_prm_reset_src_map - map from bits in the PRM_RSTST hardware
+ *   register (which are specific to OMAP33xx SoCs) to reset source ID
+ *   bit shifts (which is an OMAP SoC-independent enumeration)
+ */
+static struct prm_reset_src_map am33xx_prm_reset_src_map[] = {
+	{ AM33XX_GLOBAL_COLD_RST_SHIFT, OMAP_GLOBAL_COLD_RST_SRC_ID_SHIFT },
+	{ AM33XX_GLOBAL_SW_RST_SHIFT, OMAP_GLOBAL_WARM_RST_SRC_ID_SHIFT },
+	{ AM33XX_SECURITY_VIOL_RST_SHIFT, OMAP_SECU_VIOL_RST_SRC_ID_SHIFT },
+	{ AM33XX_MPU_WD_RST_SHIFT, OMAP_MPU_WD_RST_SRC_ID_SHIFT },
+	{ AM33XX_SECURE_WD_RST_SHIFT, OMAP_MPU_WD_RST_SRC_ID_SHIFT },
+	{ AM33XX_EXTERNAL_WARM_RST_SHIFT, OMAP_EXTWARM_RST_SRC_ID_SHIFT },
+	{ AM33XX_VDD1_VOLTAGE_MANAGER_RST_SHIFT, OMAP_VDD_MPU_VM_RST_SRC_ID_SHIFT },
+	{ AM33XX_VDD2_VOLTAGE_MANAGER_RST_SHIFT, OMAP_VDD_CORE_VM_RST_SRC_ID_SHIFT },
+	{ AM33XX_ICEPICK_RST_SHIFT, OMAP_ICEPICK_RST_SRC_ID_SHIFT },
+	{ AM33XX_ICECRUSHER_RST_SHIFT, OMAP_ICECRUSHER_RST_SRC_ID_SHIFT },
+	{ -1, -1 },
+};
+
 /* Read a register in a PRM instance */
 static u32 am33xx_prm_read_reg(s16 inst, u16 idx)
 {
@@ -324,6 +343,9 @@ static int am33xx_check_vcvp(void)
  */
 static void am33xx_prm_global_warm_sw_reset(void)
 {
+	/* clear PRM_RSTST register */
+	am33xx_prm_write_reg(0xffffffff, AM33XX_PRM_DEVICE_MOD, AM33XX_PRM_RSTST_OFFSET);
+
 	am33xx_prm_rmw_reg_bits(AM33XX_RST_GLOBAL_WARM_SW_MASK,
 				AM33XX_RST_GLOBAL_WARM_SW_MASK,
 				AM33XX_PRM_DEVICE_MOD,
@@ -363,6 +385,30 @@ static void am33xx_pwrdm_restore_context
 		am33xx_pwrdm_wait_transition(pwrdm);
 }
 
+/**
+ * am33xx_prm_read_reset_sources - return the last SoC reset source
+ *
+ * Return a u32 representing the last reset sources of the SoC.  The
+ * returned reset source bits are standardized across OMAP SoCs.
+ */
+static u32 am33xx_prm_read_reset_sources(void)
+{
+	struct prm_reset_src_map *p;
+	u32 r = 0;
+	u32 v;
+
+	v = am33xx_prm_read_reg(AM33XX_PRM_DEVICE_MOD, AM33XX_PRM_RSTST_OFFSET);
+
+	p = am33xx_prm_reset_src_map;
+	while (p->reg_shift >= 0 && p->std_shift >= 0) {
+		if (v & (1 << p->reg_shift))
+			r |= 1 << p->std_shift;
+		p++;
+	}
+
+	return r;
+}
+
 struct pwrdm_ops am33xx_pwrdm_operations = {
 	.pwrdm_set_next_pwrst		= am33xx_pwrdm_set_next_pwrst,
 	.pwrdm_read_next_pwrst		= am33xx_pwrdm_read_next_pwrst,
@@ -387,6 +433,7 @@ static struct prm_ll_data am33xx_prm_ll_
 	.deassert_hardreset		= am33xx_prm_deassert_hardreset,
 	.is_hardreset_asserted		= am33xx_prm_is_hardreset_asserted,
 	.reset_system			= am33xx_prm_global_warm_sw_reset,
+	.read_reset_sources 	= am33xx_prm_read_reset_sources,
 };
 
 int __init am33xx_prm_init(const struct omap_prcm_init_data *data)
--- a/drivers/watchdog/omap_wdt.c
+++ b/drivers/watchdog/omap_wdt.c
@@ -42,6 +42,7 @@
 #include <linux/platform_data/omap-wd-timer.h>
 
 #include "omap_wdt.h"
+#include "../../arch/arm/mach-omap2/prm.h"
 
 static bool nowayout = WATCHDOG_NOWAYOUT;
 module_param(nowayout, bool, 0);
@@ -266,6 +267,11 @@ static int omap_wdt_probe(struct platfor
 		u32 rs = pdata->read_reset_sources();
 		if (rs & (1 << OMAP_MPU_WD_RST_SRC_ID_SHIFT))
 			wdev->wdog.bootstatus = WDIOF_CARDRESET;
+		pr_info("OMAP global reset source 0x%08x\n", rs);
+	} else {
+		//since pdata is always null
+		wdev->wdog.bootstatus = prm_read_reset_sources();
+		pr_info("OMAP global reset source 0x%08x\n", prm_read_reset_sources());
 	}
 
 	if (early_enable) {
