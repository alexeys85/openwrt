--- a/drivers/rtc/rtc-omap.c
+++ b/drivers/rtc/rtc-omap.c
@@ -724,6 +724,94 @@ static struct nvmem_config omap_rtc_nvme
 	.reg_write = omap_rtc_scratch_write,
 };
 
+static ssize_t omap_rtc_scratch_sysfs_write(struct device *dev,
+				      struct device_attribute *attr,
+				      const char *buf, size_t count, unsigned int offset)
+{
+	u32 val;
+
+	if (sscanf(buf, " %u ", &val) == 1)
+		;
+	else if(sscanf(buf, " %x ", &val) == 1)
+		;
+	else if(sscanf(buf, " 0x%x ", &val) == 1)
+		;
+	else {
+		dev_err(dev, "Failed to set scratch\n");
+		return -EINVAL;
+	}
+
+	omap_rtc_scratch_write(dev_get_drvdata(dev->parent), offset, &val, 4);
+
+	return count;
+}
+
+static ssize_t omap_rtc_scratch0_write(struct device *dev,
+				      struct device_attribute *attr,
+				      const char *buf, size_t count)
+{
+	return omap_rtc_scratch_sysfs_write(dev, attr, buf, count, 0);
+}
+
+static ssize_t omap_rtc_scratch1_write(struct device *dev,
+				      struct device_attribute *attr,
+				      const char *buf, size_t count)
+{
+	return omap_rtc_scratch_sysfs_write(dev, attr, buf, count, 4);
+}
+
+static ssize_t omap_rtc_scratch2_write(struct device *dev,
+				      struct device_attribute *attr,
+				      const char *buf, size_t count)
+{
+	return omap_rtc_scratch_sysfs_write(dev, attr, buf, count, 8);
+}
+
+static ssize_t omap_rtc_scratch_sysfs_read(struct device *dev,
+				       struct device_attribute *attr, char *buf,
+				       unsigned int offset)
+{
+	u32 val;
+	omap_rtc_scratch_read(dev_get_drvdata(dev->parent), offset, &val, 4);
+	return sprintf(buf, "0x%08X\n", val);
+}
+
+static ssize_t omap_rtc_scratch0_read(struct device *dev,
+				       struct device_attribute *attr, char *buf)
+{
+	return omap_rtc_scratch_sysfs_read(dev, attr, buf, 0);
+}
+
+static ssize_t omap_rtc_scratch1_read(struct device *dev,
+				       struct device_attribute *attr, char *buf)
+{
+	return omap_rtc_scratch_sysfs_read(dev, attr, buf, 4);
+}
+
+static ssize_t omap_rtc_scratch2_read(struct device *dev,
+				       struct device_attribute *attr, char *buf)
+{
+	return omap_rtc_scratch_sysfs_read(dev, attr, buf, 8);
+}
+
+static DEVICE_ATTR(scratch0, S_IRUGO | S_IWUSR, omap_rtc_scratch0_read,
+		   omap_rtc_scratch0_write);
+static DEVICE_ATTR(scratch1, S_IRUGO | S_IWUSR, omap_rtc_scratch1_read,
+		   omap_rtc_scratch1_write);
+static DEVICE_ATTR(scratch2, S_IRUGO | S_IWUSR, omap_rtc_scratch2_read,
+		   omap_rtc_scratch2_write);
+
+static struct attribute *omap_scratch_attrs[] = {
+	&dev_attr_scratch0.attr,
+	&dev_attr_scratch1.attr,
+	&dev_attr_scratch2.attr,
+	NULL
+};
+
+static const struct attribute_group omap_sysfs_files = {
+	.attrs = omap_scratch_attrs,
+};
+
 static int omap_rtc_probe(struct platform_device *pdev)
 {
 	struct omap_rtc	*rtc;
@@ -886,6 +974,10 @@ static int omap_rtc_probe(struct platfor
 		goto err;
 	}
 
+	ret = rtc_add_group(rtc->rtc, &omap_sysfs_files);
+	if (ret)
+		goto err;
+
 	ret = devm_rtc_register_device(rtc->rtc);
 	if (ret)
 		goto err;
